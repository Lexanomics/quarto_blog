geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, aes(x = umap_1, y = umap_2, color = local_density), size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, aes(x = umap_1, y = umap_2), color = "black", size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, aes(color = "black"), size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, aes(color = "Candidate"), size = 5, shape = 17) +
scale_color_manual(values = c("No" = "grey", "Yes" = "blue", "Candidate" = "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(alpha = 0.5) +
geom_point(data = cluster_representatives, aes(color = "Candidate"), size = 5, shape = 17) +
scale_color_manual(values = c("No" = "grey", "Yes" = "blue", "Candidate" = "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, aes(color = "Candidate"), size = 5, shape = 17) +
scale_color_manual(values = c("No" = "grey", "Yes" = "blue", "Candidate" = "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, aes(x = umap_1, y = umap_2), color = "black", size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +  # Default points
geom_point(data = cluster_representatives, aes(color = "Candidate"), size = 5, shape = 17) +
scale_color_manual(values = c("No" = "grey", "Yes" = "blue", "Candidate" = "black"),
labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(shape = FALSE)  # Suppress the shape legend
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, aes(x = umap_1, y = umap_2), color = "black", size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, color = "black", size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
?order_cells
cluster_representatives
names(cluster_representatives)
row.names(cluster_representatives)
monocle_object <- order_cells(monocle_object, root_pr_nodes = row.names(cluster_representatives)) # Voa la. We can add the cell_id here.
colnames(cds[, clusters(cds) == 5])
monocle_object(monocle_object[, clusters(monocle_object) == 5])
monocle_object
colnames(monocle_object[, clusters(monocle_object) == 5])
colnames(monocle_object[, clusters(monocle_object) == 5])
colnames(monocle_object[, clusters(monocle_object) == 5])
clusters(monocle_object)
#| output: false
monocle_object <- as.cell_data_set(nk_compartiment_object)
monocle_object <- cluster_cells(monocle_object)
monocle_object <- learn_graph(monocle_object)
# This will print out an unrooted trajectory
plot_cells(
monocle_object,
color_cells_by = "cluster",
cell_size = 2,
label_groups_by_cluster = TRUE,
label_leaves = TRUE,
label_branch_points = TRUE
)
monocle_object
?clusters
clusters(monocle_object, "UMAP")
monocle_object
monocle_object@metadata
monocle_object
get_earliest_principal_node <- function(cds, time_bin="130-170"){
cell_ids <- which(colData(cds)[, "embryo.time.bin"] == time_bin)
closest_vertex <-
cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
root_pr_nodes <-
igraph::V(principal_graph(cds)[["UMAP"]])$name[as.numeric(names
(which.max(table(closest_vertex[cell_ids,]))))]
root_pr_nodes
}
get_earliest_principal_node(monocle_object)
colData(monocle_object)
root_cells
?order_cells
monocle_object <- order_cells(monocle_object, root_cells = row.names(cluster_representatives)) # Voa la. We can add the cell_id here.
plot_cells(monocle_object, color_cells_by = "pseudotime", label_cell_groups = FALSE, label_leaves = FALSE,
label_branch_points = FALSE)
p1 <- plot_cells(monocle_object, color_cells_by = "pseudotime", label_cell_groups = FALSE, label_leaves = FALSE,
label_branch_points = FALSE)
p2 <- plot_cells(monocle_object, color_cells_by = "CytoTRACE", label_cell_groups = FALSE, label_leaves = FALSE,
label_branch_points = FALSE)
p1 + p2
# This will print out an unrooted trajectory
plot_cells(
monocle_object,
color_cells_by = "partition",
cell_size = 2,
label_groups_by_cluster = TRUE,
label_leaves = TRUE,
label_branch_points = TRUE
)
p0 + p1 + p2
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
color_cells_by = "partition",
cell_size = 2,
label_groups_by_cluster = TRUE,
label_leaves = TRUE,
label_branch_points = TRUE
)
p0
monocle_object <- order_cells(
monocle_object, root_cells = row.names(cluster_representatives)) # Voa la. We can add the cell_id here.
p1 <- plot_cells(monocle_object, color_cells_by = "pseudotime", label_cell_groups = FALSE, label_leaves = FALSE,
label_branch_points = FALSE)
p2 <- plot_cells(monocle_object, color_cells_by = "CytoTRACE", label_cell_groups = FALSE, label_leaves = FALSE,
label_branch_points = FALSE)
p0 + p1 + p2
p0 + p1 + p2
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
color_cells_by = "partition",
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
monocle_object <- order_cells(
monocle_object, root_cells = row.names(cluster_representatives)) # Voa la. We can add the cell_id here.
p1 <- plot_cells(
monocle_object,
color_cells_by = "pseudotime",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p2 <- plot_cells(
monocle_object,
color_cells_by = "CytoTRACE",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p1 + p2
p1 + p2
#| output: false
monocle_object <- as.cell_data_set(nk_compartiment_object)
monocle_object <- cluster_cells(monocle_object)
monocle_object <- learn_graph(monocle_object)
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
monocle_object <- order_cells(
monocle_object, root_cells = row.names(cluster_representatives)) # Voa la. We can add the cell_id here.
p1 <- plot_cells(
monocle_object,
color_cells_by = "pseudotime",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p2 <- plot_cells(
monocle_object,
color_cells_by = "CytoTRACE",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p1 + p2
p1 + p2
monocle_object <- order_cells(
monocle_object, root_cells = row.names(cluster_representatives)) # Voa la. We can add the cell_id here.
p1 <- plot_cells(
monocle_object,
color_cells_by = "pseudotime",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p2 <- plot_cells(
monocle_object,
color_cells_by = "CytoTRACE",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p1 + p2
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
monocle_object <- order_cells(
monocle_object, root_cells = row.names(cluster_representatives)) # Voa la. We can add the cell_id here.
p1 <- plot_cells(
monocle_object,
color_cells_by = "pseudotime",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p2 <- plot_cells(
monocle_object,
color_cells_by = "CytoTRACE",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p1
p2
p1 + p2
#| fig-height: 10
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
#| fig-height: 6
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
#| fig-height: 6
#| fig-width: 4
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
#| fig-height: 6
#| fig-width: 5
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
#| fig-height: 4
#| fig-width: 5
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
#| fig-height: 6
#| fig-width: 5
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
#| fig-height: 6
#| fig-width: 5
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
#| fig-height: 6
#| fig-width: 5
#| fig-align: "center"
# This will print out an unrooted trajectory
p0 <- plot_cells(
monocle_object,
cell_size = 2,
label_groups_by_cluster = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p0
#| fig-height: 6
#| fig-width: 5
#| fig-align: "center"
p1 <- plot_cells(
monocle_object,
color_cells_by = "pseudotime",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p2 <- plot_cells(
monocle_object,
color_cells_by = "CytoTRACE",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p1 + p2
#| fig-height: 6
#| fig-width: 8
#| fig-align: "center"
p1 <- plot_cells(
monocle_object,
color_cells_by = "pseudotime",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p2 <- plot_cells(
monocle_object,
color_cells_by = "CytoTRACE",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p1 + p2
#| fig-height: 6
#| fig-width: 12
#| fig-align: "center"
p1 <- plot_cells(
monocle_object,
color_cells_by = "pseudotime",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p2 <- plot_cells(
monocle_object,
color_cells_by = "CytoTRACE",
cell_size = 2,
label_cell_groups = FALSE,
label_leaves = FALSE,
label_branch_points = FALSE
)
p1 + p2
#| fig-height: 6
#| fig-width: 5
#| fig-align: "center"
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, color = "black", size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
#| fig-height: 6
#| fig-width: 8
#| fig-align: "center"
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, color = "black", size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
#| fig-height: 6
#| fig-width: 7
#| fig-align: "center"
ggplot(data = data, aes(x = umap_1, y = umap_2)) +
geom_point(aes(color = filtered), alpha = 0.5) +
geom_point(data = cluster_representatives, color = "black", size = 5, shape = 17) +
scale_color_manual(values = c("grey", "blue", "black"), labels = c("No", "Yes", "Candidate")) +
labs(title = "UMAP Plot", x = "UMAP 1", y ="UMAP 2", color = "Has high CytoTRACE score?") +
theme_minimal() +
theme(legend.position = "bottom")
# Calculate k-nearest neighbors distance as a proxy for density
distances <- kNNdist(filtered_data, k = 5)  # You might want to adjust this based on the density you expect
# Add distances to your data frame
filtered_data$local_density = 1 / distances  # Inverse of distance to indicate density
# Determine the candidate/representative for each cluster
cluster_representatives <- data.frame()
for (i in unique(clustering$cluster)) {
if (i > 0) {
# Only consider non-noise clusters
cluster_data <- filtered_data[clustering$cluster == i,]
# Select the data point with the maximum local density
representative_index <- which.max(cluster_data$local_density)
cluster_representatives <- rbind(cluster_representatives, cluster_data[representative_index, ])
}
}
DT::datatable(cluster_representatives)
knitr::kable(cluster_representatives, sl)
knitr::kable(cluster_representatives)
#| fig-height: 12
#| fig-width: 6
#| fig-align: "center"
FeaturePlot(
seurat_object,
reduction = "umap",
label = TRUE,
ncol = 2,
features = paste0(
names(cell_lineage_markers), "_UCell")
)
#| fig-height: 10
#| fig-width: 6
#| fig-align: "center"
FeaturePlot(
seurat_object,
reduction = "umap",
label = TRUE,
ncol = 2,
features = paste0(
names(cell_lineage_markers), "_UCell")
)
#| fig-height: 10
#| fig-width: 8
#| fig-align: "center"
FeaturePlot(
seurat_object,
reduction = "umap",
label = TRUE,
ncol = 2,
features = paste0(
names(cell_lineage_markers), "_UCell")
)
#| fig-height: 12
#| fig-width: 8
#| fig-align: "center"
FeaturePlot(
seurat_object,
reduction = "umap",
label = TRUE,
ncol = 2,
features = paste0(
names(cell_lineage_markers), "_UCell")
)
