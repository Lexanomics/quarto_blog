{
  "hash": "7ee92eb424a14180556fcf9bc838298c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Yet another tip for speeding up DEG analysis on Seurat\"\nauthor: \"Lexanomics\"\ndate: \"2024-05-28\"\nbibliography: ref.bib\nexecute:\n  warning: false\nfreeze: auto\nlightbox:\n    match: auto\n    effect: zoom\n    loop: true\ncategories: [debbuging new]\n---\n\n\n![@Korsunsky653253](presto_speedup.png)\n\nNot long [ago](https://www.lexanomics.com/blog/posts/2024-03-28/), we discussed ways to speed up differential expression analysis in single-cell datasets.\n\nFor that, I wrote a quick snippet using the **future** package for parallelizing. This is 100% cool. But, recently I found a more convenient way to do such a task. On this note, since an *old dog* can still learn new tricks, I would like to introduce: **presto**.\n\nPresto is a Wilcoxon rank sum test and auROC implementation that can run 1 million observations, 1K features, and 10 groups in 16 seconds (sparse input) and 85 seconds (dense input) [1](https://github.com/immunogenomics/presto). **Yes, sir, we are fast**.\n\nHowever, presto isn't a very new tool! It has been around for at least 5 years (based on GitHub development). Yet, it became much more convenient once it was integrated into the Seurat package (version 5.1.0) [2](https://satijalab.org/seurat/articles/announcements.html).\n\nLet's do a quick and dirty hands-on.\n\nFirst, we need to load the package and the data we will use for this example. I will use the same data that I used in this **debugging new** [post](https://www.lexanomics.com/blog/posts/2024-04-16/).\n\n## 1. Loading requirements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Seurat)\nlibrary(dplyr)\nlibrary(presto) # Optional. It will be loaded behind the scenes.\n```\n:::\n\n\n## 2. Loading pre-processed Seurat object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseurat_object <- readRDS(file = here::here(\"./data/Ovarian_main_cluster_object.20k.RDS\"))\n```\n:::\n\n\n## 3. Running DEG analysis across clusters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\n# Find markers for every cluster compared to all remaining cells, report only the positive\nseurat_markers <- FindAllMarkers(seurat_object, only.pos = TRUE)\n\nend_time <- Sys.time()\n```\n:::\n\n\n**What?! How is that? I haven't change my code at all.**\n\nYes, young bioinformatician. I said it was convenient everything you need for running it is already in place in Seurat version 5.1.0. For those not using this versions, you can also rely on **SeuratWrappers**. This package has a function called `RunPrestoAll`.\n\n## 4. Inspecting DEG table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseurat_markers %>%\n  group_by(cluster) %>%\n  select(cluster, gene, pct.1, pct.2, avg_log2FC, p_val) %>%\n  top_n(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 110 × 6\n# Groups:   cluster [22]\n   cluster gene            pct.1 pct.2 avg_log2FC   p_val\n   <fct>   <chr>           <dbl> <dbl>      <dbl>   <dbl>\n 1 0       SLC26A1         0.01  0.004      0.798 0.00631\n 2 0       NATD1           0.037 0.024      0.246 0.00740\n 3 0       SLC35G1         0.012 0.005      0.428 0.00770\n 4 0       ENSG00000273088 0.022 0.012      0.145 0.00832\n 5 0       CTSK            0.041 0.027      0.903 0.00873\n 6 1       TMSB15B.1       0.012 0.006      2.82  0.00975\n 7 1       PGLYRP2         0.018 0.01       1.93  0.00975\n 8 1       ZNF585B         0.016 0.031      0.418 0.00977\n 9 1       ZNF567          0.078 0.111      0.785 0.00983\n10 1       SOBP            0.011 0.023      0.128 0.00988\n# ℹ 100 more rows\n```\n\n\n:::\n:::\n\n\nPretty cool, right? Identical results, but much faster.\n\n## 5. Measuring computational time\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomputational_time <- round(end_time - start_time, 2)\n```\n:::\n\n\n::: callout-tip\nYeah, we ran the **FindAllMarkers** function into **39.65** seconds. The authors claimed that it could be 295 times faster than conventional implementations. Do not trust them? Feel free to run it. **Hint:** You might need to change your Seurat version. Also, you can use the toy dataset in this tutorial, it can be found [here](https://drive.google.com/file/d/1m77oiU-VCHnUTWGVKSc5Lk6sZho9eVU1/view?usp=sharing).\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}