{
  "hash": "5b286922e5dc0b082c27321f5aff0b71",
  "result": {
    "markdown": "---\ntitle: \"Convert database identifiers with `biomaRt` R package\"\nauthor: \"Lexanomics\"\ndate: \"2024-06-13\"\nexecute:\n  warning: false\nfreeze: auto\nlightbox:\n    match: auto\n    effect: zoom\n    loop: true\ncategories: [debbuging new]\n---\n\n\nBioMart is an integral part of the Ensembl project, and it was designed to facilitate the access and retrieval of biological data. With BioMart, users can easily extract information about genes, proteins, and other genomic features, linking this data across various biological datasets. Its flexibility and ease of use make it an invaluable tool for bioinformaticians and biologists aiming to integrate and analyze large-scale biological data efficiently. BioMart is available through its [web page](http://www.ensembl.org/info/data/biomart/index.html), however, there's the [`biomaRt`](https://bioconductor.org/packages/release/bioc/html/biomaRt.html) R/Bioconductor package that can be used to access data programatically.\n\nIn this tutorial, we show how to make a simple query using the `biomaRt` R package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_list <- read.table(\"~/genes.txt\", header = T, sep = \"\\t\")\n```\n:::\n\n\nSuppose that we have a list of human peptides (Ensembl peptide IDs) and we want to retrieve their corresponding gene symbols.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gene_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ensembl_peptide_id\n1    ENSP00000330918\n2    ENSP00000364486\n3    ENSP00000436217\n4    ENSP00000364699\n5    ENSP00000432005\n6    ENSP00000436669\n```\n:::\n:::\n\n\nWith biomaRt package, we can do that in 3 simple steps:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(biomaRt)\n```\n:::\n\n\n1. Set the ensembl channel: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nensembl <- useMart(\"ENSEMBL_MART_ENSEMBL\")\n```\n:::\n\n\nDepending on the type of data you want to collect (e.g., variants), there are other channels available. To list all channels available, use the `listMarts()` function. \n\n2. Choose a dataset (organism): \n\nFor human data, the dataset keyword is `hsapiens_gene_ensembl`. To access the keywords for other organisms, run the `listDatasets()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nensembl <- useDataset(dataset = \"hsapiens_gene_ensembl\", mart = ensembl)\n```\n:::\n\n\n3. Make the query:\n\nBefore making the query, we need to know which attribute keywords are available at BioMart database. We can list the attributes available with the `listAttributes()` function. We also need to obtain the filter keywords by using the `listFilters()` function. In summary, the attributes are the ID keywords you want to retrieve and the filters are the ID keywords you'll use to make the query. \n\nWith proper attributes and filters selected, you can pass them to the `attributes` and `filters` arguments from the `getBM()` function. If you have a specific list of identifiers to convert, like we do have from the `gene_list` dataframe, pass it to the `values` argument. If you do not provide anything to the `values` argument, the `getBM()` function will return all identifiers requested for the attributes provided on the chosen organism.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dataframe with attributes\natt <- listAttributes(ensembl)\n\n# Dataframe with filters\nfilters <- listFilters(ensembl)\n\n# Make the query with getBM function\nids <- getBM(attributes = c(\"hgnc_symbol\", \"ensembl_peptide_id\"),\n             filters = \"ensembl_peptide_id\",\n             values = gene_list$ensembl_peptide_id,\n             mart = ensembl)\n\nhead(ids)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  hgnc_symbol ensembl_peptide_id\n1        PCK2    ENSP00000494029\n2        PCK2    ENSP00000496343\n3        PCK2    ENSP00000496102\n4        PCK2    ENSP00000494919\n5       FOXO1    ENSP00000368880\n6       PTPN2    ENSP00000320298\n```\n:::\n:::\n\n\nAnd that's it! You can make many different queries on the database identifiers provided by BioMart.\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}